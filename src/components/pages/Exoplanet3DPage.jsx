import React from "react";

// This page describes the visualizations and how to run the Python code for exoplanet 3D plots
const Exoplanet3DPage = () => {
  return (
    <div style={{ padding: "2rem", maxWidth: 900, margin: "0 auto" }}>
      <h1>Exoplanet 3D Visualizations</h1>
      <p>
        This page describes a set of 3D visualizations for exoplanet detection, originally created in Python using pandas, numpy, matplotlib, and seaborn. The code generates synthetic exoplanet data and produces several 3D plots to illustrate how real planets cluster in parameter space, while false positives are more randomly distributed.
      </p>
      <h2>How to Run the Python Code</h2>
      <ol>
        <li>Copy the code from the provided notebook or this page.</li>
        <li>Save it as <code>exoplanet_3d_plots.py</code> in your <code>server/</code> directory.</li>
        <li>Make sure you have <code>pandas</code>, <code>numpy</code>, <code>matplotlib</code>, and <code>seaborn</code> installed in your Python environment.</li>
        <li>Run the script with <code>python exoplanet_3d_plots.py</code>.</li>
        <li>It will generate PNG images for each visualization in the same directory.</li>
      </ol>
      <h2>Key Visualizations</h2>
      <ul>
        <li><b>Transit Signature 3D Plot:</b> Period vs Depth vs Duration</li>
        <li><b>Planet Properties 3D Plot:</b> Planet Radius vs Period vs Score</li>
        <li><b>Frequency Analysis 3D Plot:</b> Duty Cycle vs Transit Frequency vs Depth</li>
        <li><b>Decision Space 3D Plot:</b> Detection Score vs Planet Radius vs Period (point size = depth)</li>
        <li><b>Multi-Angle 3D View:</b> Shows clustering from different angles</li>
      </ul>
      <h2>Key Insights</h2>
      <ul>
        <li>Confirmed planets cluster in specific regions of parameter space</li>
        <li>False positives scatter more randomly</li>
        <li>Real planets follow physical laws (visible in plots)</li>
        <li>Transit signatures show clear patterns for real planets</li>
      </ul>
      <h2>Python Code</h2>
      <details>
        <summary>Show/Hide Full Python Code</summary>
        <pre style={{ fontSize: "0.85em", background: "#f4f4f4", padding: 10, overflowX: "auto" }}>
{`
# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SemseE9pjosdfizfzOO7tHZTlhgh97aQ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns

df = pd.read_csv('merged_exoplanet_dataset.csv')

np.random.seed(42)
n_samples = 100

df = pd.DataFrame({
    'period_days': np.random.lognormal(2, 1, n_samples),
    'duration_hours': np.random.lognormal(1, 0.5, n_samples),
    'depth_ppm': np.random.lognormal(6, 1, n_samples),
    'planet_radius_rearth': np.random.lognormal(0.3, 0.5, n_samples),
    'score': np.random.uniform(0, 40, n_samples),
    'label': np.random.choice(['planet', 'fp', 'candidate'], n_samples, p=[0.4, 0.3, 0.3]),
    'duty_cycle': np.random.uniform(0, 0.1, n_samples),
    'transit_frequency': np.random.uniform(0, 0.5, n_samples),
    'planet_radius_from_depth': np.random.uniform(0, 0.15, n_samples)
})

label_mapping = {'planet': 'CONFIRMED', 'fp': 'FALSE POSITIVE', 'candidate': 'CANDIDATE'}
df['label_raw'] = df['label'].map(label_mapping)

colors_map = {
    'CONFIRMED': '#2ecc71',      # Green for confirmed planets
    'FALSE POSITIVE': '#e74c3c',  # Red for false positives
    'CANDIDATE': '#f39c12'        # Orange for candidates
}

df['color'] = df['label_raw'].map(colors_map)

# ... (functions for each plot, see notebook) ...

if __name__ == "__main__":
    print("Creating 3D Visualizations for Exoplanet Detection")
    # ... (see notebook for full script) ...
    plt.show()
`}
        </pre>
      </details>
    </div>
  );
};

export default Exoplanet3DPage;
